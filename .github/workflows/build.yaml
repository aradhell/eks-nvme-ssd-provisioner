name: ARM Build & Release
on:
  release:
    types:
      - created

jobs:

  build-for-production:
    name: "Build (& Publish) for Production ARM"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
          token: ${{ secrets.GH_REPO_ALLOWED_TOKEN }}

      - name: Docker Buildx
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.2

      - name: Set env IMAGE_TAG and IMAGE_NAME
        env:
          IMAGE_VERSION: ""
          IMAGE_BRANCH: ""
          IMAGE_TAG: ""
        run: |
          echo "IMAGE_BRANCH=${{ github.event.release.target_commitish }}" >> $GITHUB_ENV
          echo "IMAGE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.release.target_commitish }}" >> $GITHUB_ENV

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GHA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GHA }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


#      - name: Run paratest
#        run: |
#          vendor/bin/paratest -p4 --colors --coverage-clover=clover.xml --log-junit=junit.xml --stop-on-failure
#
#      - name: fix code coverage paths
#        run: |
#          sed -i 's/\/home\/runner\/work\/product\/product\//\/github\/workspace\//g' clover.xml
#          sed -i 's/\/home\/runner\/work\/product\/product\//\/github\/workspace\//g' junit.xml

#      - name: SonarCloud Scan
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: eks-nvme-ssd-provisioner
        run: |
          echo $IMAGE_VERSION
          docker pull $ECR_REPOSITORY:latest | true
          docker buildx build -f Dockerfile-arm . --platform linux/amd64,linux/arm64 --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_VERSION --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest --cache-from $ECR_REPOSITORY:latest --push

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

